
/**
 * @class A simple wrapper class that built upon {@link WeakMap}.
 */
export class Weakmap<K extends object, V> {

    private _map: WeakMap<K, V> = new WeakMap();
    private _fn: (val: K) => V;

    /**
     * @param mapFn The mapping function that creates value with type `V` for 
     *              each new key with type `K`.
     */
    constructor(mapFn: (val: K) => V) {
        this._fn = mapFn;
    }

    /**
     * @description Given the key with type `K`, returns the corresponding value 
     * with type `V` which will be generated by the provided mapping function if 
     * it is the first time, otherwise it will be remembered.
     * @param key The key with type `K`.
     * @returns The corresponding value with type `V`.
     */
    public map(key: K): V {
        let val = this._map.get(key);

        if (val === undefined) {
            val = this._fn(key);
            this._map.set(key, val);
        }

        return val;
    }

}